import Head from 'next/head'
import { AlertDialog, AlertDialogFooter, AlertDialogHeader, AlertDialogContent, VStack, Text, Image, Grid, HStack, NumberInput, NumberInputField, NumberInputStepper, NumberIncrementStepper, NumberDecrementStepper, Button, useToast, Breadcrumb, BreadcrumbItem, useDisclosure, AlertDialogBody, AlertDialogCloseButton, Center, IconButton, DarkMode, useColorModeValue, useColorMode } from '@chakra-ui/react'
import Teams from '../lib/teams.json'
import { initializeApp } from 'firebase/app'
import { get, getDatabase, increment, ref, set } from 'firebase/database'
import { useState } from 'react'
import { InfoIcon, MoonIcon, SunIcon, TriangleDownIcon, TriangleUpIcon } from '@chakra-ui/icons'

type Team = {
  name: string,
  logo: string
}

const config = {
  apiKey: "AIzaSyAhueS1EcupzIUmTA7nhm7bwF48qDN8zbc",
  authDomain: "community-ranking-d7bf5.firebaseapp.com",
  databaseURL: "https://community-ranking-d7bf5-default-rtdb.firebaseio.com",
  projectId: "community-ranking-d7bf5",
  storageBucket: "community-ranking-d7bf5.appspot.com",
  messagingSenderId: "494668400916",
  appId: "1:494668400916:web:5cfb82bcd3b57f12ec9a01",
  measurementId: "G-EWZZ6L87ZR"
}

initializeApp(config)

const db = getDatabase()

const writeTeamData = (teamName: string, spot: number) => {
  set(ref(db, teamName), {
    numberOfVotes: increment(1),
    sumOfVotes: increment(spot)
  })
}

const retrieveTeamData = async (teamName: string) => {
  const snapshot = await get(ref(db, teamName))
  return snapshot.val()
}

const getSpot = (sumOfVotes: number, numberOfVotes: number) => {
  const predefined = sumOfVotes / numberOfVotes
  return isNaN(predefined) ? 0: predefined
}

const Home = ({ teamsData }) => {
  const toast = useToast()
  const { isOpen, onOpen, onClose } = useDisclosure()
  const [teamToVote, setTeamToVote] = useState(undefined)
  const { toggleColorMode } = useColorMode() 

  Teams.sort((a: Team, b: Team) => {
    const getSpotA = getSpot(teamsData[a.name].sumOfVotes, teamsData[a.name].numberOfVotes)
    const getSpotB = getSpot(teamsData[b.name].sumOfVotes, teamsData[b.name].numberOfVotes)

    if (getSpotA > getSpotB) {
      return 1
    } else if (getSpotA < getSpotB) {
      return -1
    } else {
      return 0
    }
  })

  let teamSpots = []
  Teams.map(key => {
    teamSpots.push(key.name)
  })

  return (
    <>
      <Head>
        <title>Counter-Strike Community Ranking</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <IconButton colorScheme={useColorModeValue('teal', 'blue')} borderTopLeftRadius="0" borderTopRightRadius="0" borderBottomLeftRadius="0" borderBottomRightRadius="25%" onClick={toggleColorMode} icon={useColorModeValue(<MoonIcon />, <SunIcon />)} />

      <AlertDialog
        isCentered
        isOpen={isOpen}
        onClose={onClose}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            Confirmation of the vote
          </AlertDialogHeader>
          <AlertDialogCloseButton />

          <AlertDialogBody>
            Are you sure you&apos;d like to do the vote?
          </AlertDialogBody>

          <AlertDialogFooter>
            <Button variant="outline" colorScheme="teal" onClick={() => {
              onClose()
              writeTeamData(document.getElementById(`${Teams[teamToVote].name}-team-name`).innerText, parseInt(document.getElementById(`${Teams[teamToVote].name}-input`).value))
              toast({
                title: 'Success',
                description: 'Your vote has been included',
                status: 'success',
                duration: 5000,
                isClosable: true
              })
            }}>Confirm the vote</Button>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
      <Text fontSize="4rem" textAlign="center" mt="1rem">The Community Ranking</Text>

      <Center>
        <VStack mt="1rem" spacing={2}>
          <HStack>
            <InfoIcon boxSize="3rem" />
            <Text textAlign="center" fontSize="1.5rem">Spots in total: 30</Text>
          </HStack>
          <Text textAlign="center" fontSize="1.5rem" lineHeight="2.5rem">You can refresh the page<br />once you have opted<br /><span style={{ backgroundColor: '#B2F5EA', color: '#000', borderRadius: '9999px', padding: '0.4rem', paddingLeft: '0.8rem', paddingRight: '0.8rem' }}>for the spot</span></Text>
        </VStack>
      </Center>

      <Center mt="2rem">
        <Grid gridAutoFlow="row" rowGap="2rem">
          {Object.keys(Teams).map((key: string) => (
            <VStack backgroundColor={useColorModeValue("#1a202c", "#111827")} padding="2rem" paddingX="1.5rem" rounded="lg" borderWidth="2px" borderColor="#374151">
              <HStack spacing="0.1rem">
                <VStack spacing="1rem">
                  <DarkMode>
                    <NumberInput id={`${Teams[key].name}-input`} keepWithinRange={true} color="#fff" defaultValue={teamSpots.indexOf(Teams[key].name)+1} min={1} max={30}>
                      <NumberInputField width="9rem" height="4rem" textAlign="center" fontSize="1.8rem" />
                      <NumberInputStepper>
                        <NumberDecrementStepper children={<TriangleUpIcon />} />
                        <NumberIncrementStepper children={<TriangleDownIcon />} />
                      </NumberInputStepper>
                    </NumberInput>
                  </DarkMode>
                  <DarkMode>
                    <Button variant="outline" colorScheme="teal" onClick={() => {
                      setTeamToVote(key)
                      onOpen()
                    }}>Vote</Button>
                  </DarkMode>
                </VStack>
                <VStack spacing="0.4rem"> 
                  <Center width="7rem">
                    <Image
                      src={Teams[key].logo}
                      draggable={false}
                      width="3.5rem"
                      height="auto"
                    />
                  </Center>
                  <Text id={`${Teams[key].name}-team-name`} color="#fff" fontWeight="600">{Teams[key].name}</Text>
                </VStack>
              </HStack>
            </VStack>
          ))}
        </Grid>
      </Center>
    </>
  )
}


export async function getServerSideProps() {
  let teamsData = {}

  await Promise.all(Teams.map(async team => {
    return retrieveTeamData(team.name).then(snapshot => {
      teamsData[team.name] = snapshot
    })
  }))

  return { props: { teamsData } }
}

export default Home
