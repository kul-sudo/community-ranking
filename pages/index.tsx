import Head from 'next/head'
import { AlertDialog, AlertDialogFooter, AlertDialogHeader, AlertDialogContent, VStack, Text, Image, Grid, HStack, NumberInput, NumberInputField, NumberInputStepper, NumberIncrementStepper, NumberDecrementStepper, Button, AlertDialogBody, AlertDialogCloseButton, Center, DarkMode, Box, Input, Hide, useDisclosure, useToast } from '@chakra-ui/react'
import { InfoIcon, TriangleDownIcon, TriangleUpIcon } from '@chakra-ui/icons'
import Teams from '../lib/teams.json'
import { initializeApp } from 'firebase/app'
import { get, getDatabase, increment, ref, set } from 'firebase/database'
import { useState } from 'react'

type Team = {
  name: string,
  logo: string
}

const config = {
  apiKey: "AIzaSyAhueS1EcupzIUmTA7nhm7bwF48qDN8zbc",
  authDomain: "community-ranking-d7bf5.firebaseapp.com",
  databaseURL: "https://community-ranking-d7bf5-default-rtdb.firebaseio.com",
  projectId: "community-ranking-d7bf5",
  storageBucket: "community-ranking-d7bf5.appspot.com",
  messagingSenderId: "494668400916",
  appId: "1:494668400916:web:5cfb82bcd3b57f12ec9a01",
  measurementId: "G-EWZZ6L87ZR"
}

initializeApp(config)

const db = getDatabase()

const writeTeamData = (teamName: string, spot: number) => {
  set(ref(db, teamName), {
    numberOfVotes: increment(1),
    sumOfVotes: increment(spot)
  })
}

const retrieveTeamData = async (teamName: string) => {
  const snapshot = await get(ref(db, teamName))
  return snapshot.val()
}

const getSpot = (sumOfVotes: number, numberOfVotes: number) => {
  const predefined = sumOfVotes / numberOfVotes
  return isNaN(predefined) ? 0: predefined
}

const Home = ({ teamsData }) => {
  const toast = useToast()
  const { isOpen, onOpen, onClose } = useDisclosure()

  const [teamToVote, setTeamToVote] = useState(undefined)
  const [searchTeam, setSearchTeam] = useState('')
  const handleChange = event => setSearchTeam(event.target.value)

  Teams.sort((a: Team, b: Team) => {
    const getSpotA = getSpot(teamsData[a.name].sumOfVotes, teamsData[a.name].numberOfVotes)
    const getSpotB = getSpot(teamsData[b.name].sumOfVotes, teamsData[b.name].numberOfVotes)

    if (getSpotA > getSpotB) {
      return 1
    } else if (getSpotA < getSpotB) {
      return -1
    } else {
      return 0
    }
  })

  let teamSpots = []
  Teams.map(key => {
    teamSpots.push(key.name)
  })

  return (
    <>
      <Head>
        <title>Counter-Strike Community Ranking</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <AlertDialog
        isCentered
        isOpen={isOpen}
        onClose={onClose}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            Confirmation of the vote
          </AlertDialogHeader>
          <AlertDialogCloseButton />

          <AlertDialogBody>
            Are you sure you&apos;d like to do the vote?
          </AlertDialogBody>

          <AlertDialogFooter>
            <Button variant="outline" colorScheme="teal" onClick={() => {
              onClose()
              const parsedInput = document.getElementById(`${Teams[teamToVote].name}-input`).value
              if (parsedInput === '') {
                toast({
                  title: 'Error',
                  description: 'There is no number in the input',
                  status: 'error',
                  duration: 5000,
                  isClosable: true
                })
                return
              }
              writeTeamData(Teams[teamToVote].name, parseInt(parsedInput))
              toast({
                title: 'Success',
                description: 'Your vote has been included',
                status: 'success',
                duration: 5000,
                isClosable: true
              })
            }}>Confirm the vote</Button>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
      <Text fontSize="3.5rem" textAlign="center" mt="1rem" bgClip="text" fill="transparent" bgColor="#da99ff" bgGradient="radial-gradient(at 87% 44%, hsla(223,70%,78%,1) 0px, transparent 50%), radial-gradient(at 76% 71%, hsla(260,97%,61%,1) 0px, transparent 50%), radial-gradient(at 90% 10%, hsla(338,78%,60%,1) 0px, transparent 50%), radial-gradient(at 32% 68%, hsla(357,99%,79%,1) 0px, transparent 50%), radial-gradient(at 62% 29%, hsla(284,73%,79%,1) 0px, transparent 50%), radial-gradient(at 35% 23%, hsla(195,91%,76%,1) 0px, transparent 50%), radial-gradient(at 71% 80%, hsla(315,99%,69%,1) 0px, transparent 50%);" >The Community Ranking</Text>

      <Center>
        <VStack mt="1rem" spacing={2}>
          <HStack>
            <InfoIcon boxSize="3rem" />
            <Text textAlign="center" fontSize="1.5rem">Spots in total: 30</Text>
          </HStack>
          <Text textAlign="center" fontSize="1.5rem" lineHeight="2.5rem">You can refresh the page<br />once you have opted<br /><Center><Box width="55%" borderRadius="9999px" bgGradient="radial-gradient(at 87% 44%, hsla(223,70%,78%,1) 0px, transparent 50%), radial-gradient(at 76% 71%, hsla(260,97%,61%,1) 0px, transparent 50%), radial-gradient(at 90% 10%, hsla(338,78%,60%,1) 0px, transparent 50%), radial-gradient(at 32% 68%, hsla(357,99%,79%,1) 0px, transparent 50%), radial-gradient(at 62% 29%, hsla(284,73%,79%,1) 0px, transparent 50%), radial-gradient(at 35% 23%, hsla(195,91%,76%,1) 0px, transparent 50%), radial-gradient(at 71% 80%, hsla(315,99%,69%,1) 0px, transparent 50%);"><span style={{ color: '#000', borderRadius: '9999px' }}>for the spot</span></Box></Center></Text>
        </VStack>
      </Center>

      <Center>
        <VStack spacing="2rem">
          <Input width="22.4rem" mt="2rem" placeholder="Enter the team name" value={searchTeam} onChange={handleChange} />
          <Grid mt="2rem" gridAutoFlow="row" rowGap="2rem">
            {Object.keys(Teams).map((key: string) => {
              if (Teams[key].name.toLowerCase().includes(searchTeam.toLowerCase())) {
                return (
                  <HStack position="relative" justifyContent="center" backgroundColor="#111827" height="6rem" width={{ base: '20rem', '446px': '27rem', '1100px': '27.5rem' }} rounded="lg" borderWidth="2px" borderColor="#374151">
                    <HStack>
                      <HStack spacing="0.4rem" position="absolute" left="2.5rem">
                        <Image
                          src={Teams[key].logo}
                          draggable={false}
                          width={{ base: '2.5rem', '1100px': '2.7rem' }}
                          height="auto"
                        />
                        <Hide breakpoint="(max-width: 446px)">
                          <Text id={`${Teams[key].name}-team-name`} color="#fff" fontWeight="600" fontSize={{ base: '0.9rem', '1100px': '0.85rem' }}>{Teams[key].name}</Text>
                        </Hide>
                      </HStack>
                      <HStack spacing="1rem" position="absolute" right="2.5rem">
                        <DarkMode>
                          <NumberInput id={`${Teams[key].name}-input`} keepWithinRange={true} color="#fff" defaultValue={teamSpots.indexOf(Teams[key].name)+1} min={1} max={30}>
                            <NumberInputField width={{ base: '5rem', '1100px': '5.5rem' }} height={{ base: '2.5rem', '1100px': '2.7rem' }} textAlign="center" fontSize={{ base: '1.2rem', '1100px': '1.2rem' }} />
                            <NumberInputStepper>
                              <NumberDecrementStepper children={<TriangleUpIcon />} />
                              <NumberIncrementStepper children={<TriangleDownIcon />} />
                            </NumberInputStepper>
                          </NumberInput>
                        </DarkMode>
                        <DarkMode>
                          <Button width={{ base: '4.356rem', '1100px': '4.3rem' }} height={{ base: '2.2rem', '1100px': '2.5rem' }} variant="outline" colorScheme="teal" onClick={() => {
                            setTeamToVote(key)
                            onOpen()
                          }}>Vote</Button>
                        </DarkMode>
                      </HStack>
                    </HStack>
                  </HStack>
                )
              }
            })}
          </Grid>
        </VStack>
      </Center>
    </>
  )
}


export async function getServerSideProps() {
  let teamsData = {}

  await Promise.all(Teams.map(async team => {
    return retrieveTeamData(team.name).then(snapshot => {
      teamsData[team.name] = snapshot
    })
  }))

  return { props: { teamsData } }
}

export default Home
